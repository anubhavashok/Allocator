// ------------------------------
// projects/allocator/Allocator.h
// Copyright (C) 2013
// Glenn P. Downing
// ------------------------------

#ifndef Allocator_h
#define Allocator_h

// --------
// includes
// --------

#include <cassert> // assert
#include <cstddef> // ptrdiff_t, size_t
#include <new>     // new

// ---------
// Allocator
// ---------

template <typename T, int N>
class Allocator {
    public:
        // --------
        // typedefs
        // --------

        typedef T                 value_type;

        typedef std::size_t       size_type;
        typedef std::ptrdiff_t    difference_type;

        typedef       value_type*       pointer;
        typedef const value_type* const_pointer;

        typedef       value_type&       reference;
        typedef const value_type& const_reference;

    public:
        // -----------
        // operator ==
        // -----------

        friend bool operator == (const Allocator&, const Allocator&) {
            return true;}                                              // this is correct

        // -----------
        // operator !=
        // -----------

        friend bool operator != (const Allocator& lhs, const Allocator& rhs) {
            return !(lhs == rhs);}

    private:
        // ----
        // data
        // ----

        char a[N];

        // -----
        // valid
        // -----

        /**
         * O(1) in space
         * O(n) in time
         * Checks if all sentinels match up
         */
        bool valid () const {
            int* ptr=(int*)a;
            while(ptr<(int*)(&a[N-4]))
            {
                printf("[%d][",*ptr);
                int size = abs(*ptr);
                ptr =(int*)( (char* )ptr +size +4);

                for(int i=0;i<size;i++)
                {
                        printf(".");
                }
                printf("][%d]",*ptr);

                if(abs(*ptr) != size)
                {
                        return false;
                }
                ptr=(int*)((char*)ptr+4);
            }
            printf("\n");
            return true;}

        /**
         * O(1) in space
         * O(1) in time
         * <your documentation>
         */
        int& view (int i) {
            return *reinterpret_cast<int*>(&a[i]);}

    public:
        // ------------
        // constructors
        // ------------

        /**
         * O(1) in space
         * O(1) in time
         * Sets up start and end sentinel
         */
        Allocator () {
            int* ptr = (int*)a;
            *ptr = N-8;
            ptr= (int*) (&a[N-1]-3);
            *ptr = N-8;
            //a= [N-8][........][N-8]
            assert(valid());}

        // Default copy, destructor, and copy assignment
        // Allocator  (const Allocator&);
        // ~Allocator ();
        // Allocator& operator = (const Allocator&);

        // --------
        // allocate
        // --------

        /**
         * O(1) in space
         * O(n) in time
         * <your documentation>
         * after allocation there must be enough space left for a valid block
         * the smallest allowable block is sizeof(T) + (2 * sizeof(int))
         * choose the first block that fits
         */
        pointer allocate (size_type n) {
            // <your code>
            assert(valid());
            return 0;}                   // replace!

        // ---------
        // construct
        // ---------

        /**
         * O(1) in space
         * O(1) in time
         * <your documentation>
         */
        void construct (pointer p, const_reference v) {
            new (p) T(v);                               // this is correct and exempt
            assert(valid());}                           // from the prohibition of new

        // ----------
        // deallocate
        // ----------

        /**
         * O(1) in space
         * O(1) in time
	 * @param p: pointer to used block
         * Deallocates used blocks and coalesces free blocks
         */
        void deallocate (pointer p, size_type ) {

                int* start = (int*)((char*)(p)-4);
                assert(*start<0);
                *start =0-*start;
                assert(*start>0);

                int* end = (int*)((char*)(p)+*start);
                assert(*end<0);
                *end =0-*end;
                assert(*end>0);

		//check if left block is within array bounds
                if(start>(int*)&a[3])
                {
                        int* left = (int*)((char*)(start)-4);
                        if(*left>0)
                                coalesce(left,start);
                }

		//check if right block is within array bounds
                if(end<(int*)&a[N-4])
                {
                        int* right = (int* )((char*) end +4);
                        assert(*end>0); 
                        if(*right>0)
                                coalesce(end,right);
                }
            assert(valid());}
        // ----------
        // coalesce
        // ----------

        /**
	 * @param right: pointer pointing to start sentinel of right block
         * @param left:  pointer pointing to end sentinel of left block
         * joins 2 free blocks
         */
        void coalesce (int* left, int* right)
        {
                int* ptr = left;
                assert(*left>0);
                assert(*right>0);
                //store new coalesced size
                int new_size = *right + 8 + *left;

                //go to left start sentinel and change it to new size
                ptr = (int*)((char*)ptr - *left -4);
                *ptr = new_size;

                //go to right end sentinel and change it to new size
                ptr = (int*)((char*)ptr+ *ptr +4);
                assert(ptr==(int*)((char*)right+4+*right));
                *ptr = new_size;
        }
        // -------
        // destroy
        // -------

        /**
         * O(1) in space
         * O(1) in time
         * <your documentation>
         */
        void destroy (pointer p) {
            p->~T();               // this is correct
            assert(valid());}

        /**
         * O(1) in space
         * O(1) in time
         * <your documentation>
         */
        const int& view (int i) const {
            return *reinterpret_cast<const int*>(&a[i]);}};

#endif // Allocator_h

